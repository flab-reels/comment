version: 0.2

env:
  variables:
    REPOSITORY_URI: sample-base-repo

phases:
  install:
    runtime-versions:
      nodejs: latest
      java : corretto11
    commands:
#      - yum install -y jq
#      - npm install -g npm@latest

  pre_build:
    commands:
      # Set up environment variables like image tag and repo
#      - cd $CODEBUILD_SRC_DIR/trivia-backend
#      - export IMAGE_TAG=build-`echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}'`
#      - AWS_ACCOUNT_ID=`echo $CODEBUILD_BUILD_ARN | awk -F":" '{print $5}'`
#      - ECR_REPO=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
#      - $(aws ecr get-login --no-include-email)
      - echo Java version check
      - java --version
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $ACCOUNT_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$ACCOUNT_REGION.amazonaws.com
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
      - chmod +x gradlew

      # Consume base image from the pipeline
#      - export BASE_IMAGE=`jq -r '.ImageURI' <$CODEBUILD_SRC_DIR_BaseImage/imageDetail.json`
#      - sed -i "s|reinvent-trivia-backend-base:release|$BASE_IMAGE|g" Dockerfile

  build:
    commands:
      - ./gradlew bootBuildImage --imageName=$REPOSITORY_URI:$IMAGE_TAG
      - export imageTag=$IMAGE_TAG
      - echo imageTag=$IMAGE_TAG
      # Build and push Docker image
#      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
#      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $ECR_REPO:$IMAGE_TAG
#      - docker push $ECR_REPO:$IMAGE_TAG
#
#      # Save the Docker image digest
#      - IMAGE_URI=`docker inspect --format='{{index .RepoDigests 0}}' $ECR_REPO:$IMAGE_TAG`
#      - echo Built image $IMAGE_URI, pushed with tag $IMAGE_TAG
#      - echo "{\"ImageURI\":\"$IMAGE_URI\"}" > imageDetail.json

      # Generate appspec and task definition files (filling in subnet IDs, security group IDs, etc)
#      - cd infra
#      - mkdir build
#      - npm ci
#      - node produce-config.js -g test -s TriviaBackendTest -h TriviaBackendHooksTest
#      - node produce-config.js -g prod -s TriviaBackendProd -h TriviaBackendHooksProd
  post_build:
    commands:
      - echo Pushing the Docker image...
      - docker push  $REPOSITORY_URI:$IMAGE_TAG

artifacts:
  secondary-artifacts:
    BuildArtifact:
      files:
        - /infra/build/appspec-prod.json
        - /infra/build/appspec-test.json
        - /infra/build/task-definition-test.json
        - /infra/build/task-definition-prod.json
      discard-paths: yes
    ImageDetails:
      files:
        - /imageDetail.json
      discard-paths: yes
