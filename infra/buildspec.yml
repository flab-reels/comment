version: 0.2

#env:
#  variables:
#    REPOSITORY_URI: sample-base-repo

phases:
  install:
    runtime-versions:
#      14
      nodejs: latest
      java : corretto11
    commands:
#      - yum install -y jq
      - cd infra
      - mkdir build
      - npm init --force --yes
      - npm install aws-sdk
      - npm install yargs
      - ls
      - cd ..
      - pwd

  pre_build:
    commands:
      # Set up environment variables like image tag and repo
#      - cd $CODEBUILD_SRC_DIR/trivia-backend
#      - export IMAGE_TAG=build-`echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}'`
#      - AWS_ACCOUNT_ID=`echo $CODEBUILD_BUILD_ARN | awk -F":" '{print $5}'`
#      - ECR_REPO=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
#      - $(aws ecr get-login --no-include-email)
      - echo Java version check
      - java --version
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $ACCOUNT_REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$ACCOUNT_REGION.amazonaws.com
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
      - chmod +x gradlew

      # Consume base image from the pipeline
#      - export BASE_IMAGE=`jq -r '.ImageURI' <$CODEBUILD_SRC_DIR_BaseImage/imageDetail.json`
#      - sed -i "s|reinvent-trivia-backend-base:release|$BASE_IMAGE|g" Dockerfile

  build:
    commands:
#      - ./gradlew bootBuildImage --imageName=$REPOSITORY_URI:$IMAGE_TAG
#      - export imageTag=$IMAGE_TAG
#      - echo imageTag=$IMAGE_TAG
#
#      - echo Pushing the Docker image...
#      - docker push $REPOSITORY_URI:$IMAGE_TAG
#      - echo Built image $REPOSITORY_URI, pushed with tag $IMAGE_TAG
#      - echo "{\"ImageURI\":\"$IMAGE_URI\"}" > imageDetail.json #  use definitions files to map the image URI and container name to the task definition

      # Generate appspec and task definition files (filling in subnet IDs, security group IDs, etc)
      - cd infra
      - node produce-config.js -s SampleCIPipelineStack
artifacts:
  files :
#    # This will be used for codedeploy
#    - imageDetail.json
  secondary-artifacts:
    BuildArtifact:
      files:
        - /infra/build/appspec-sample.json
        - /infra/build/task-definition-sample.json
      discard-paths: yes
#    ImageDetails:
#      files:
#        - /imageDetail.json
#      discard-paths: yes
